{
  "address": "0x9927EFfCA02d23665E8f5F65288ed6B76Cd16a95",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "consumerId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ConsumerAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "consumerTicker",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "distributorTicker",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "energyConsumed",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "today",
          "type": "uint256"
        }
      ],
      "name": "ConsumerCancelledElectricity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "consumerId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "distributorId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "prevDistributorId",
          "type": "uint256"
        }
      ],
      "name": "ConsumerConnectedToDistributor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "distributorId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "energyAvailableToBuy",
          "type": "uint256"
        }
      ],
      "name": "DistributorAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "distributorId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "substationId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "prevSubstationId",
          "type": "uint256"
        }
      ],
      "name": "DistributorConnectedToSubstation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "consumerId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "energyConsumed",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        }
      ],
      "name": "ElectricityPaidByConsumer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "powerplantId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "energyAdded",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "date",
          "type": "uint256"
        }
      ],
      "name": "EnergyAddedByPowerPlant",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "distributorId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "energyBought",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "date",
          "type": "uint256"
        }
      ],
      "name": "EnergyBoughtByDistributor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "substationId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "energyBought",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "date",
          "type": "uint256"
        }
      ],
      "name": "EnergyBoughtBySubstation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "powerplantId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "PowerPlantAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "substationId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "energyAvailableToBuy",
          "type": "uint256"
        }
      ],
      "name": "SubstationAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "substationId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "powerPlantId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "prevPowerplantId",
          "type": "uint256"
        }
      ],
      "name": "SubstationConnectedToPowerPlant",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "day",
          "type": "uint256"
        }
      ],
      "name": "UpdateUnitsConsumedRan",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_homeAddress",
          "type": "string"
        }
      ],
      "name": "addConsumer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_area",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_energyAvailableToBuy",
          "type": "uint256"
        }
      ],
      "name": "addDistributor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_energyAvailableToBuy",
          "type": "uint256"
        }
      ],
      "name": "addEnergyAvailableToBuy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_area",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_energyAvailableToBuy",
          "type": "uint256"
        }
      ],
      "name": "addPowerPlant",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_area",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_energyAvailableToBuy",
          "type": "uint256"
        }
      ],
      "name": "addSubstation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_energyAmount",
          "type": "uint256"
        }
      ],
      "name": "buyEnergyFromPowerPlant",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_energyAmount",
          "type": "uint256"
        }
      ],
      "name": "buyEnergyFromSubstation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "calculateEnergyConsumptionOfEachConsumer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_distributorIndex",
          "type": "uint256"
        }
      ],
      "name": "connectConsumerToDistributor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_substationIndex",
          "type": "uint256"
        }
      ],
      "name": "connectDistributorToSubstation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "powerplantIndex",
          "type": "uint256"
        }
      ],
      "name": "connectSubstationToPowerplant",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "consumerPayments",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "unitsConsumed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "consumers",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "homeAddress",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "consumerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "distributorId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalEnergyConsumed",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isElectricitySupply",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "payableAmountForEnergy",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startCycleTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endCycleTime",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isLastElectricityBillPaid",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "energyConsumedInCurrentCycle",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "consumersAddressToIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "consumersDailyEnergyBoughtById",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "distributorAddressToIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "distributorArray",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "distributors",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "substationId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "distributorAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "area",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "energyAvailable",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalEnergySold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalEnergyBought",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isEnergySupply",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isLessEnergyWarning",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "distributorsDailyEnergyBoughtById",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "distributorsDailyEnergySoldById",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_consumerIndex",
          "type": "uint256"
        }
      ],
      "name": "getConsumerById",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "homeAddress",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "consumerAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "distributorId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalEnergyConsumed",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isElectricitySupply",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "payableAmountForEnergy",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startCycleTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endCycleTime",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isLastElectricityBillPaid",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "energyConsumedInCurrentCycle",
              "type": "uint256"
            }
          ],
          "internalType": "struct ElectricitySupplyChain.Consumer",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_consumerIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_day",
          "type": "uint256"
        }
      ],
      "name": "getConsumerEnergyBoguhtByDay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_distributorIndex",
          "type": "uint256"
        }
      ],
      "name": "getConsumersFromADistributor",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_distributorIndex",
          "type": "uint256"
        }
      ],
      "name": "getDistributorById",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "substationId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "distributorAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "area",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "energyAvailable",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "consumerIds",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "totalEnergySold",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalEnergyBought",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isEnergySupply",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isLessEnergyWarning",
              "type": "bool"
            }
          ],
          "internalType": "struct ElectricitySupplyChain.Distributor",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_distributorIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_day",
          "type": "uint256"
        }
      ],
      "name": "getDistributorEnergyBoguhtByDay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDistributors",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_powerplantIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_day",
          "type": "uint256"
        }
      ],
      "name": "getPowerPlantEnergyProducedByDay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_powerplantIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_day",
          "type": "uint256"
        }
      ],
      "name": "getPowerPlantEnergySoldByDay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_powerplantIndex",
          "type": "uint256"
        }
      ],
      "name": "getPowerplantById",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "area",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "powerplantAddress",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "substationIds",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "totalEnergyProduced",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalEnergySold",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "energyAvailableToBuy",
              "type": "uint256"
            }
          ],
          "internalType": "struct ElectricitySupplyChain.PowerPlant",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_substationIndex",
          "type": "uint256"
        }
      ],
      "name": "getSubstationById",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "area",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "powerplantId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "substationAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "totalEnergyReceived",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalEnergySold",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "distributorIds",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "energyAvailableToBuy",
              "type": "uint256"
            }
          ],
          "internalType": "struct ElectricitySupplyChain.Substation",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_substationIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_day",
          "type": "uint256"
        }
      ],
      "name": "getSubstationEnergyBoughtByDay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_substationIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_day",
          "type": "uint256"
        }
      ],
      "name": "getSubstationEnergySoldByDay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_powerplantIndex",
          "type": "uint256"
        }
      ],
      "name": "getSubstationsOfPowerPlant",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "area",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "powerplantId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "substationAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "totalEnergyReceived",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalEnergySold",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "distributorIds",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "energyAvailableToBuy",
              "type": "uint256"
            }
          ],
          "internalType": "struct ElectricitySupplyChain.Substation[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "consumerIndex",
          "type": "uint256"
        }
      ],
      "name": "getUnitsConsumedByConsumerInCycle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "payBill",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "payBillAndCancelSupply",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "powerPlants",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "area",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "powerplantAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalEnergyProduced",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalEnergySold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "energyAvailableToBuy",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "powerPlantsAddressToIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "powerPlantsDailyEnergyProducedById",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "powerPlantsDailyEnergySoldById",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "substations",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "area",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "powerplantId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "substationAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalEnergyReceived",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalEnergySold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "energyAvailableToBuy",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "substationsAddressToIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "substationsDailyEnergyBoughtById",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "substationsDailyEnergySoldById",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x1d21832f669d9eaf450c5cf4234a3ba2d82ad6cb397ec7df97d65f38d3732476",
  "receipt": {
    "to": null,
    "from": "0x9C1A27B0ff601d24Ba527E404DBC9211A3C2eEbC",
    "contractAddress": "0x9927EFfCA02d23665E8f5F65288ed6B76Cd16a95",
    "transactionIndex": 1,
    "gasUsed": "3831225",
    "logsBloom": "0x
    "blockHash": "0x963b4c8dd9a88ae1de945b2b1133111060825ef3817f25110ed68335ef51b664",
    "transactionHash": "0x1d21832f669d9eaf450c5cf4234a3ba2d82ad6cb397ec7df97d65f38d3732476",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 34848523,
        "transactionHash": "0x1d21832f669d9eaf450c5cf4234a3ba2d82ad6cb397ec7df97d65f38d3732476",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000009c1a27b0ff601d24ba527e404dbc9211a3c2eebc",
          "0x0000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000236e3aa9ad2f170000000000000000000000000000000000000000000000000155971f593f678600000000000000000000000000000000000000000000072d1037c8140745e306000000000000000000000000000000000000000000000000013228e4af92386f00000000000000000000000000000000000000000000072d105b364eb0f3121d",
        "logIndex": 2,
        "blockHash": "0x963b4c8dd9a88ae1de945b2b1133111060825ef3817f25110ed68335ef51b664"
      }
    ],
    "blockNumber": 34848523,
    "cumulativeGasUsed": "3852225",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 20,
  "solcInputHash": "a7c1973c3a704b043eb99b590ba04240",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"consumerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ConsumerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"consumerTicker\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"distributorTicker\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"energyConsumed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"today\",\"type\":\"uint256\"}],\"name\":\"ConsumerCancelledElectricity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"consumerId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"distributorId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"prevDistributorId\",\"type\":\"uint256\"}],\"name\":\"ConsumerConnectedToDistributor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"distributorId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"energyAvailableToBuy\",\"type\":\"uint256\"}],\"name\":\"DistributorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"distributorId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"substationId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"prevSubstationId\",\"type\":\"uint256\"}],\"name\":\"DistributorConnectedToSubstation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"consumerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"energyConsumed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"ElectricityPaidByConsumer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"powerplantId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"energyAdded\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"EnergyAddedByPowerPlant\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"distributorId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"energyBought\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"EnergyBoughtByDistributor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"substationId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"energyBought\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"EnergyBoughtBySubstation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"powerplantId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"PowerPlantAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"substationId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"energyAvailableToBuy\",\"type\":\"uint256\"}],\"name\":\"SubstationAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"substationId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"powerPlantId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"prevPowerplantId\",\"type\":\"uint256\"}],\"name\":\"SubstationConnectedToPowerPlant\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"}],\"name\":\"UpdateUnitsConsumedRan\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_homeAddress\",\"type\":\"string\"}],\"name\":\"addConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_area\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_energyAvailableToBuy\",\"type\":\"uint256\"}],\"name\":\"addDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_energyAvailableToBuy\",\"type\":\"uint256\"}],\"name\":\"addEnergyAvailableToBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_area\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_energyAvailableToBuy\",\"type\":\"uint256\"}],\"name\":\"addPowerPlant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_area\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_energyAvailableToBuy\",\"type\":\"uint256\"}],\"name\":\"addSubstation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_energyAmount\",\"type\":\"uint256\"}],\"name\":\"buyEnergyFromPowerPlant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_energyAmount\",\"type\":\"uint256\"}],\"name\":\"buyEnergyFromSubstation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculateEnergyConsumptionOfEachConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_distributorIndex\",\"type\":\"uint256\"}],\"name\":\"connectConsumerToDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_substationIndex\",\"type\":\"uint256\"}],\"name\":\"connectDistributorToSubstation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"powerplantIndex\",\"type\":\"uint256\"}],\"name\":\"connectSubstationToPowerplant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"consumerPayments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unitsConsumed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"consumers\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"homeAddress\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"consumerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"distributorId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalEnergyConsumed\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isElectricitySupply\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"payableAmountForEnergy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startCycleTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endCycleTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLastElectricityBillPaid\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"energyConsumedInCurrentCycle\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"consumersAddressToIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"consumersDailyEnergyBoughtById\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"distributorAddressToIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"distributorArray\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"distributors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"substationId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"distributorAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"area\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"energyAvailable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalEnergySold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalEnergyBought\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isEnergySupply\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isLessEnergyWarning\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"distributorsDailyEnergyBoughtById\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"distributorsDailyEnergySoldById\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_consumerIndex\",\"type\":\"uint256\"}],\"name\":\"getConsumerById\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"homeAddress\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"consumerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"distributorId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalEnergyConsumed\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isElectricitySupply\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"payableAmountForEnergy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startCycleTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endCycleTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLastElectricityBillPaid\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"energyConsumedInCurrentCycle\",\"type\":\"uint256\"}],\"internalType\":\"struct ElectricitySupplyChain.Consumer\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_consumerIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_day\",\"type\":\"uint256\"}],\"name\":\"getConsumerEnergyBoguhtByDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_distributorIndex\",\"type\":\"uint256\"}],\"name\":\"getConsumersFromADistributor\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_distributorIndex\",\"type\":\"uint256\"}],\"name\":\"getDistributorById\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"substationId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"distributorAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"area\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"energyAvailable\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"consumerIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"totalEnergySold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalEnergyBought\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isEnergySupply\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isLessEnergyWarning\",\"type\":\"bool\"}],\"internalType\":\"struct ElectricitySupplyChain.Distributor\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_distributorIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_day\",\"type\":\"uint256\"}],\"name\":\"getDistributorEnergyBoguhtByDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDistributors\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_powerplantIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_day\",\"type\":\"uint256\"}],\"name\":\"getPowerPlantEnergyProducedByDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_powerplantIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_day\",\"type\":\"uint256\"}],\"name\":\"getPowerPlantEnergySoldByDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_powerplantIndex\",\"type\":\"uint256\"}],\"name\":\"getPowerplantById\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"area\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"powerplantAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"substationIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"totalEnergyProduced\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalEnergySold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"energyAvailableToBuy\",\"type\":\"uint256\"}],\"internalType\":\"struct ElectricitySupplyChain.PowerPlant\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_substationIndex\",\"type\":\"uint256\"}],\"name\":\"getSubstationById\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"area\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"powerplantId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"substationAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalEnergyReceived\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalEnergySold\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"distributorIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"energyAvailableToBuy\",\"type\":\"uint256\"}],\"internalType\":\"struct ElectricitySupplyChain.Substation\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_substationIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_day\",\"type\":\"uint256\"}],\"name\":\"getSubstationEnergyBoughtByDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_substationIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_day\",\"type\":\"uint256\"}],\"name\":\"getSubstationEnergySoldByDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_powerplantIndex\",\"type\":\"uint256\"}],\"name\":\"getSubstationsOfPowerPlant\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"area\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"powerplantId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"substationAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalEnergyReceived\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalEnergySold\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"distributorIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"energyAvailableToBuy\",\"type\":\"uint256\"}],\"internalType\":\"struct ElectricitySupplyChain.Substation[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"consumerIndex\",\"type\":\"uint256\"}],\"name\":\"getUnitsConsumedByConsumerInCycle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payBill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payBillAndCancelSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"powerPlants\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"area\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"powerplantAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalEnergyProduced\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalEnergySold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"energyAvailableToBuy\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"powerPlantsAddressToIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"powerPlantsDailyEnergyProducedById\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"powerPlantsDailyEnergySoldById\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"substations\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"area\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"powerplantId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"substationAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalEnergyReceived\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalEnergySold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"energyAvailableToBuy\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"substationsAddressToIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"substationsDailyEnergyBoughtById\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"substationsDailyEnergySoldById\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ElectricitySupplyChain.sol\":\"ElectricitySupplyChain\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ElectricitySupplyChain.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\n\\r\\ncontract ElectricitySupplyChain {\\r\\n    event PowerPlantAdded(uint256 indexed powerplantId, address indexed owner);\\r\\n    event EnergyAddedByPowerPlant(\\r\\n        uint256 indexed powerplantId,\\r\\n        uint256 energyAdded,\\r\\n        uint256 date\\r\\n    );\\r\\n\\r\\n    event SubstationAdded(\\r\\n        uint256 indexed substationId,\\r\\n        address indexed owner,\\r\\n        uint256 energyAvailableToBuy\\r\\n    );\\r\\n    event SubstationConnectedToPowerPlant(\\r\\n        uint256 indexed substationId,\\r\\n        uint256 indexed powerPlantId,\\r\\n        uint256 indexed prevPowerplantId\\r\\n    );\\r\\n    event EnergyBoughtBySubstation(\\r\\n        uint256 indexed substationId,\\r\\n        uint256 energyBought,\\r\\n        uint256 date\\r\\n    );\\r\\n\\r\\n    event DistributorAdded(\\r\\n        uint256 indexed distributorId,\\r\\n        address indexed owner,\\r\\n        uint256 energyAvailableToBuy\\r\\n    );\\r\\n    event DistributorConnectedToSubstation(\\r\\n        uint256 indexed distributorId,\\r\\n        uint256 indexed substationId,\\r\\n        uint256 indexed prevSubstationId\\r\\n    );\\r\\n    event EnergyBoughtByDistributor(\\r\\n        uint256 indexed distributorId,\\r\\n        uint256 energyBought,\\r\\n        uint256 date\\r\\n    );\\r\\n\\r\\n    event ConsumerAdded(uint256 indexed consumerId, address owner);\\r\\n    event ConsumerConnectedToDistributor(\\r\\n        uint256 indexed consumerId,\\r\\n        uint256 indexed distributorId,\\r\\n        uint256 indexed prevDistributorId\\r\\n    );\\r\\n    event ElectricityPaidByConsumer(\\r\\n        uint256 indexed consumerId,\\r\\n        uint256 energyConsumed,\\r\\n        uint256 startTime,\\r\\n        uint256 endTime\\r\\n    );\\r\\n\\r\\n    event UpdateUnitsConsumedRan(uint256 day);\\r\\n\\r\\n    event ConsumerCancelledElectricity(\\r\\n        uint256 consumerTicker,\\r\\n        uint256 distributorTicker,\\r\\n        uint256 energyConsumed,\\r\\n        uint256 startTime,\\r\\n        uint256 today\\r\\n    );\\r\\n    // Define the Distributor struct\\r\\n    struct Distributor {\\r\\n        uint256 substationId;\\r\\n        address distributorAddress;\\r\\n        string name;\\r\\n        string area;\\r\\n        uint256 energyAvailable;\\r\\n        uint256[] consumerIds;\\r\\n        uint256 totalEnergySold;\\r\\n        uint256 totalEnergyBought;\\r\\n        bool isEnergySupply;\\r\\n        bool isLessEnergyWarning;\\r\\n    }\\r\\n\\r\\n    // Define the Substation struct\\r\\n    struct Substation {\\r\\n        string name;\\r\\n        string area;\\r\\n        uint256 powerplantId;\\r\\n        address substationAddress;\\r\\n        uint256 totalEnergyReceived;\\r\\n        uint256 totalEnergySold;\\r\\n        uint256[] distributorIds;\\r\\n        uint256 energyAvailableToBuy;\\r\\n    }\\r\\n\\r\\n    // Define the PowerPlant struct\\r\\n    struct PowerPlant {\\r\\n        string name;\\r\\n        string area;\\r\\n        address powerplantAddress;\\r\\n        uint256[] substationIds;\\r\\n        uint256 totalEnergyProduced;\\r\\n        uint256 totalEnergySold;\\r\\n        uint256 energyAvailableToBuy;\\r\\n    }\\r\\n\\r\\n    struct Consumer {\\r\\n        string name;\\r\\n        string homeAddress;\\r\\n        address consumerAddress;\\r\\n        uint256 distributorId;\\r\\n        uint256 totalEnergyConsumed;\\r\\n        bool isElectricitySupply;\\r\\n        uint256 payableAmountForEnergy;\\r\\n        uint256 startCycleTime;\\r\\n        uint256 endCycleTime;\\r\\n        bool isLastElectricityBillPaid;\\r\\n        uint256 energyConsumedInCurrentCycle;\\r\\n        // uint256 lastScriptExecutionTime;\\r\\n        // uint256 currentScriptExecutionTime;\\r\\n    }\\r\\n\\r\\n    struct Payment {\\r\\n        uint256 unitsConsumed;\\r\\n        // uint256 amountPaid; TODO: include this\\r\\n        uint256 startTime;\\r\\n        uint256 endTime;\\r\\n    }\\r\\n\\r\\n    // consumer -> Payment\\r\\n    mapping(address => Payment[]) public consumerPayments;\\r\\n\\r\\n    // Define an array to hold all the power plants\\r\\n    mapping(uint256 => PowerPlant) public powerPlants;\\r\\n    mapping(address => uint256) public powerPlantsAddressToIds;\\r\\n    mapping(uint256 => mapping(uint256 => uint256))\\r\\n        public powerPlantsDailyEnergyProducedById;\\r\\n    mapping(uint256 => mapping(uint256 => uint256))\\r\\n        public powerPlantsDailyEnergySoldById;\\r\\n\\r\\n    mapping(uint256 => Distributor) public distributors;\\r\\n    mapping(address => uint256) public distributorAddressToIds;\\r\\n    uint256[] public distributorArray;\\r\\n    // distributorId -> date -> energy bought\\r\\n    mapping(uint256 => mapping(uint256 => uint256))\\r\\n        public distributorsDailyEnergyBoughtById;\\r\\n    mapping(uint256 => mapping(uint256 => uint256))\\r\\n        public distributorsDailyEnergySoldById;\\r\\n\\r\\n    mapping(uint256 => Substation) public substations;\\r\\n    mapping(address => uint256) public substationsAddressToIds;\\r\\n\\r\\n    mapping(uint256 => mapping(uint256 => uint256))\\r\\n        public substationsDailyEnergyBoughtById;\\r\\n    mapping(uint256 => mapping(uint256 => uint256))\\r\\n        public substationsDailyEnergySoldById;\\r\\n\\r\\n    mapping(uint256 => Consumer) public consumers;\\r\\n    mapping(address => uint256) public consumersAddressToIds;\\r\\n\\r\\n    mapping(uint256 => mapping(uint256 => uint256))\\r\\n        public consumersDailyEnergyBoughtById;\\r\\n\\r\\n    // ids for each entity\\r\\n    uint256 powerPlantCount;\\r\\n    uint256 distributorCount;\\r\\n    uint256 substationCount;\\r\\n    uint256 consumerCount;\\r\\n\\r\\n    // Define a function to add a new power plant to the supply chain\\r\\n    function addPowerPlant(\\r\\n        string memory _name,\\r\\n        string memory _area,\\r\\n        uint256 _energyAvailableToBuy\\r\\n    ) accountExists() public {\\r\\n        uint256 powerplantId = powerPlantsAddressToIds[msg.sender];\\r\\n        // check if power plant does not exist with the wallet address\\r\\n        require(powerplantId == 0, \\\"Power plant already exists\\\");\\r\\n        powerPlantCount += 1;\\r\\n        PowerPlant storage powerplant = powerPlants[powerPlantCount];\\r\\n        powerPlantsAddressToIds[msg.sender] = powerPlantCount;\\r\\n        // Create a new PowerPlant struct\\r\\n        powerplant.powerplantAddress = msg.sender;\\r\\n        powerplant.name = _name;\\r\\n        powerplant.area = _area;\\r\\n        powerplant.energyAvailableToBuy = _energyAvailableToBuy;\\r\\n        powerplant.totalEnergyProduced = _energyAvailableToBuy;\\r\\n        uint256 today = block.timestamp / 86400;\\r\\n        powerPlantsDailyEnergyProducedById[powerPlantCount][\\r\\n            today\\r\\n        ] = _energyAvailableToBuy;\\r\\n        emit PowerPlantAdded(powerPlantCount, msg.sender);\\r\\n    }\\r\\n\\r\\n    // Define a function to add a new substation to a power plant\\r\\n    function addSubstation(\\r\\n       \\r\\n        string memory _name,\\r\\n        string memory _area,\\r\\n        uint256 _energyAvailableToBuy\\r\\n    ) accountExists() public {\\r\\n        require(\\r\\n            substationsAddressToIds[msg.sender] == 0,\\r\\n            \\\"Substation already exists with the current address\\\"\\r\\n        );\\r\\n        substationCount += 1;\\r\\n        Substation storage substation = substations[substationCount];\\r\\n        substationsAddressToIds[msg.sender] = substationCount;\\r\\n        substation.name = _name;\\r\\n        substation.area = _area;\\r\\n        substation.substationAddress = msg.sender;\\r\\n        substation.energyAvailableToBuy = _energyAvailableToBuy;\\r\\n        // add substation id to the power plant\\r\\n\\r\\n        emit SubstationAdded(\\r\\n            substationCount,\\r\\n            msg.sender,\\r\\n            _energyAvailableToBuy\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function connectSubstationToPowerplant(\\r\\n        uint256 powerplantIndex\\r\\n    ) public onlySubstationOwner powerPlantExists(powerplantIndex) {\\r\\n        Substation storage substation = substations[\\r\\n            substationsAddressToIds[msg.sender]\\r\\n        ];\\r\\n        uint256 prevPlantId = substation.powerplantId;\\r\\n        if (substation.powerplantId != 0) {\\r\\n            PowerPlant storage prevPlant = powerPlants[substation.powerplantId];\\r\\n            uint256 index;\\r\\n            for (uint256 i = 0; i < prevPlant.substationIds.length; i++) {\\r\\n                if (\\r\\n                    prevPlant.substationIds[i] ==\\r\\n                    substationsAddressToIds[msg.sender]\\r\\n                ) {\\r\\n                    index = i;\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n            for (uint i = index; i < prevPlant.substationIds.length - 1; i++) {\\r\\n                prevPlant.substationIds[i] = prevPlant.substationIds[i + 1];\\r\\n            }\\r\\n            prevPlant.substationIds.pop();\\r\\n        }\\r\\n        substation.powerplantId = powerplantIndex;\\r\\n        PowerPlant storage powerplant = powerPlants[powerplantIndex];\\r\\n        powerplant.substationIds.push(substationsAddressToIds[msg.sender]);\\r\\n        emit SubstationConnectedToPowerPlant(\\r\\n            substationsAddressToIds[msg.sender],\\r\\n            powerplantIndex,\\r\\n            prevPlantId\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // Define a function to add energy available to buy for a powerplant\\r\\n    function addEnergyAvailableToBuy(\\r\\n        uint256 _energyAvailableToBuy\\r\\n    ) public onlyPowerPlantOwner {\\r\\n        uint256 powerplantId = powerPlantsAddressToIds[msg.sender];\\r\\n        PowerPlant storage powerPlant = powerPlants[powerplantId];\\r\\n        powerPlant.energyAvailableToBuy += _energyAvailableToBuy;\\r\\n        // Update the daily energy produced mapping\\r\\n        uint256 today = block.timestamp / 86400;\\r\\n        powerPlantsDailyEnergyProducedById[powerplantId][\\r\\n            today\\r\\n        ] += _energyAvailableToBuy;\\r\\n        powerPlant.totalEnergyProduced += _energyAvailableToBuy;\\r\\n        emit EnergyAddedByPowerPlant(\\r\\n            powerplantId,\\r\\n            _energyAvailableToBuy,\\r\\n            today\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // Define a function for a substation to buy energy from a power plant\\r\\n    function buyEnergyFromPowerPlant(\\r\\n        uint256 _energyAmount\\r\\n    ) public onlySubstationOwner {\\r\\n        uint256 substationId = substationsAddressToIds[msg.sender];\\r\\n        Substation storage substation = substations[substationId];\\r\\n        // Get the power plant from the powerPlants array\\r\\n        PowerPlant storage powerPlant = powerPlants[substation.powerplantId];\\r\\n        require(\\r\\n            powerPlant.energyAvailableToBuy >= _energyAmount,\\r\\n            \\\"Insufficient energy available to buy\\\"\\r\\n        );\\r\\n        powerPlant.energyAvailableToBuy -= _energyAmount;\\r\\n        substation.totalEnergyReceived += _energyAmount;\\r\\n        // Update the daily energy bought mapping\\r\\n        uint256 today = block.timestamp / 86400;\\r\\n        substationsDailyEnergyBoughtById[substationId][today] += _energyAmount;\\r\\n        substation.energyAvailableToBuy += _energyAmount;\\r\\n        powerPlantsDailyEnergySoldById[substation.powerplantId][\\r\\n            today\\r\\n        ] += _energyAmount;\\r\\n        powerPlant.totalEnergySold += _energyAmount;\\r\\n        emit EnergyBoughtBySubstation(\\r\\n            substationsAddressToIds[msg.sender],\\r\\n            _energyAmount,\\r\\n            today\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function addDistributor(\\r\\n        string memory _name,\\r\\n        string memory _area,\\r\\n        uint256 _energyAvailableToBuy\\r\\n    ) accountExists() public {\\r\\n        require(\\r\\n            distributorAddressToIds[msg.sender] == 0,\\r\\n            \\\"Distributor already exists with the address\\\"\\r\\n        );\\r\\n        distributorCount += 1;\\r\\n        Distributor storage distributor = distributors[distributorCount];\\r\\n        distributorAddressToIds[msg.sender] = distributorCount;\\r\\n        distributor.name = _name;\\r\\n        distributor.area = _area;\\r\\n        distributor.distributorAddress = msg.sender;\\r\\n        distributor.energyAvailable = _energyAvailableToBuy;\\r\\n        distributor.isEnergySupply = true;\\r\\n        distributorArray.push(distributorCount);\\r\\n        emit DistributorAdded(\\r\\n            distributorCount,\\r\\n            msg.sender,\\r\\n            _energyAvailableToBuy\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function connectDistributorToSubstation(\\r\\n        uint256 _substationIndex\\r\\n    ) public onlyDistributorOwner substationExists(_substationIndex) {\\r\\n        Distributor storage distributor = distributors[\\r\\n            distributorAddressToIds[msg.sender]\\r\\n        ];\\r\\n        uint256 prevSubstationIndex = distributor.substationId;\\r\\n        if (distributor.substationId != 0) {\\r\\n            Substation storage prevSubstation = substations[\\r\\n                distributor.substationId\\r\\n            ];\\r\\n            uint256 index;\\r\\n            for (uint256 i = 0; i < prevSubstation.distributorIds.length; i++) {\\r\\n                if (\\r\\n                    prevSubstation.distributorIds[i] ==\\r\\n                    distributorAddressToIds[msg.sender]\\r\\n                ) {\\r\\n                    index = i;\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n            for (\\r\\n                uint i = index;\\r\\n                i < prevSubstation.distributorIds.length - 1;\\r\\n                i++\\r\\n            ) {\\r\\n                prevSubstation.distributorIds[i] = prevSubstation\\r\\n                    .distributorIds[i + 1];\\r\\n            }\\r\\n            prevSubstation.distributorIds.pop();\\r\\n        }\\r\\n        distributor.substationId = _substationIndex;\\r\\n        Substation storage substation = substations[_substationIndex];\\r\\n        substation.distributorIds.push(substationsAddressToIds[msg.sender]);\\r\\n        emit DistributorConnectedToSubstation(\\r\\n            distributorAddressToIds[msg.sender],\\r\\n            _substationIndex,\\r\\n            prevSubstationIndex\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function buyEnergyFromSubstation(\\r\\n        uint256 _energyAmount\\r\\n    ) public onlyDistributorOwner {\\r\\n        uint256 distributorId = distributorAddressToIds[msg.sender];\\r\\n        Distributor storage distributor = distributors[distributorId];\\r\\n        // Get the power plant from the powerPlants array\\r\\n        Substation storage substation = substations[distributor.substationId];\\r\\n        require(\\r\\n            substation.energyAvailableToBuy >= _energyAmount,\\r\\n            \\\"Insufficient energy available to buy\\\"\\r\\n        );\\r\\n        substation.energyAvailableToBuy -= _energyAmount;\\r\\n        distributor.totalEnergyBought += _energyAmount;\\r\\n        // Update the daily energy bought mapping\\r\\n        uint256 today = block.timestamp / 86400;\\r\\n        distributorsDailyEnergyBoughtById[distributorId][\\r\\n            today\\r\\n        ] += _energyAmount;\\r\\n        distributor.energyAvailable += _energyAmount;\\r\\n        substationsDailyEnergySoldById[distributor.substationId][\\r\\n            today\\r\\n        ] += _energyAmount;\\r\\n        distributor.isEnergySupply = true;\\r\\n        distributor.isLessEnergyWarning = false;\\r\\n         for (uint j = 0; j < distributor.consumerIds.length; j++) {\\r\\n                    Consumer storage consumer = consumers[\\r\\n                        distributor.consumerIds[j]\\r\\n                    ];\\r\\n                    consumer.isElectricitySupply = true;\\r\\n         }\\r\\n        emit EnergyBoughtByDistributor(distributorId, _energyAmount, today);\\r\\n    }\\r\\n\\r\\n    function addConsumer(\\r\\n        string memory _name,\\r\\n        string memory _homeAddress\\r\\n    ) accountExists() public {\\r\\n        consumerCount += 1;\\r\\n        Consumer storage consumer = consumers[consumerCount];\\r\\n        consumer.name = _name;\\r\\n        consumer.homeAddress = _homeAddress;\\r\\n        consumersAddressToIds[msg.sender] = consumerCount;\\r\\n        consumer.consumerAddress = msg.sender;\\r\\n        consumer.isLastElectricityBillPaid = true;\\r\\n        emit ConsumerAdded(consumerCount, msg.sender);\\r\\n    }\\r\\n\\r\\n    function calculateEnergyConsumptionOfEachConsumer() public {\\r\\n        uint256 today = block.timestamp / 86400;\\r\\n        for (uint i = 0; i < distributorArray.length; i++) {\\r\\n            // get all the distributors\\r\\n            Distributor storage distributor = distributors[distributorArray[i]];\\r\\n            // showing warning message if distributor has less than 20% energy\\r\\n            uint256 minimumEnergyPercentage = (distributor.energyAvailable*20)/100; \\r\\n            if(minimumEnergyPercentage<=20) distributor.isLessEnergyWarning=true;\\r\\n            if (distributor.isEnergySupply) {\\r\\n                uint256 totalEnergyConsumedByConsumersOfADistributor = 0;\\r\\n                // variable for totalEnergyConsmedofADistributor\\r\\n                for (uint j = 0; j < distributor.consumerIds.length; j++) {\\r\\n                    Consumer storage consumer = consumers[\\r\\n                        distributor.consumerIds[j]\\r\\n                    ];\\r\\n\\r\\n                    // to reset last electricity bill paid as false\\r\\n                    if (consumer.isLastElectricityBillPaid)\\r\\n                        consumer.isLastElectricityBillPaid = false;\\r\\n                    // consumer.lastScriptExecutionTime = consumer\\r\\n                    //     .currentScriptExecutionTime;\\r\\n                    // consumer.currentScriptExecutionTime = block.timestamp;\\r\\n                    // uint256 energyConsumedInThisCycle = consumer\\r\\n                    //     .currentScriptExecutionTime -\\r\\n                    //     consumer.lastScriptExecutionTime;\\r\\n                    // if (energyConsumedInThisCycle > distributor.energyAvailable) {\\r\\n                    //     distributor.isEnergySupply = false;\\r\\n                    //      consumer\\r\\n                    //         .energyConsumedInCurrentCycle += distributor.energyAvailable;\\r\\n                    //     consumer.totalEnergyConsumed += distributor.energyAvailable;\\r\\n                    //     totalEnergyConsumedByConsumersOfADistributor += (distributor.energyAvailable);\\r\\n                    //     distributor.energyAvailable = 0;\\r\\n                    // }\\r\\n                    // if (distributor.isEnergySupply) {\\r\\n                    //     consumer\\r\\n                    //         .energyConsumedInCurrentCycle += energyConsumedInThisCycle;\\r\\n                    //     consumer.totalEnergyConsumed += energyConsumedInThisCycle;\\r\\n                    //     totalEnergyConsumedByConsumersOfADistributor += (consumer\\r\\n                    //         .currentScriptExecutionTime -\\r\\n                    //         consumer.lastScriptExecutionTime);\\r\\n                    // }\\r\\n\\r\\n                    consumer.totalEnergyConsumed++;\\r\\n                    consumer.energyConsumedInCurrentCycle++;\\r\\n                    distributor.energyAvailable--;\\r\\n                    totalEnergyConsumedByConsumersOfADistributor++;\\r\\n                    consumersDailyEnergyBoughtById[distributor.consumerIds[j]][\\r\\n                        today\\r\\n                    ]++;\\r\\n                    if (distributor.energyAvailable <= 0) {\\r\\n                        distributor.isEnergySupply = false;\\r\\n                        for (uint k = 0; k < distributor.consumerIds.length; k++) {\\r\\n                            Consumer storage consumerInner = consumers[\\r\\n                                distributor.consumerIds[k]\\r\\n                            ];\\r\\n                            consumerInner.isElectricitySupply = false;\\r\\n                        }\\r\\n                        break;\\r\\n                    }\\r\\n                }\\r\\n                distributor\\r\\n                    .totalEnergySold += totalEnergyConsumedByConsumersOfADistributor;\\r\\n                distributorsDailyEnergySoldById[distributorArray[i]][\\r\\n                    today\\r\\n                ] += totalEnergyConsumedByConsumersOfADistributor;\\r\\n                // if (\\r\\n                //     totalEnergyConsumedByConsumersOfADistributor >\\r\\n                //     distributor.energyAvailable\\r\\n                // ) {\\r\\n                //     distributor.energyAvailable = 0;\\r\\n                //     distributor.isEnergySupply = false;\\r\\n                // } else\\r\\n                //     distributor\\r\\n                //         .energyAvailable -= totalEnergyConsumedByConsumersOfADistributor;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit UpdateUnitsConsumedRan(today);\\r\\n    }\\r\\n\\r\\n    // as soon as consumer connects, the energy consumption starts\\r\\n    function connectConsumerToDistributor(\\r\\n        uint256 _distributorIndex\\r\\n    ) public distributorExists(_distributorIndex) onlyConsumerOwner {\\r\\n        require(\\r\\n            distributors[_distributorIndex].energyAvailable >= 0,\\r\\n            \\\"Distributor doesn't have enough energy, please connect later\\\"\\r\\n        );\\r\\n        uint256 consumerId = consumersAddressToIds[msg.sender];\\r\\n        Consumer storage consumer = consumers[consumerId];\\r\\n        require(\\r\\n            consumer.isLastElectricityBillPaid,\\r\\n            \\\"Please pay the energy used first\\\"\\r\\n        );\\r\\n        Distributor storage distributor = distributors[_distributorIndex];\\r\\n        uint256 prevDistributorId = consumer.distributorId;\\r\\n        if (prevDistributorId != 0) {\\r\\n            Distributor storage prevDistributor = distributors[\\r\\n                prevDistributorId\\r\\n            ];\\r\\n            uint256 index;\\r\\n            for (uint256 i = 0; i < prevDistributor.consumerIds.length; i++) {\\r\\n                if (\\r\\n                    prevDistributor.consumerIds[i] ==\\r\\n                    consumersAddressToIds[msg.sender]\\r\\n                ) {\\r\\n                    index = i;\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n            for (\\r\\n                uint i = index;\\r\\n                i < prevDistributor.consumerIds.length - 1;\\r\\n                i++\\r\\n            ) {\\r\\n                prevDistributor.consumerIds[i] = prevDistributor.consumerIds[\\r\\n                    i + 1\\r\\n                ];\\r\\n            }\\r\\n            prevDistributor.consumerIds.pop();\\r\\n        }\\r\\n        distributor.consumerIds.push(consumerId);\\r\\n        consumer.startCycleTime = block.timestamp;\\r\\n        //TODO: uncomment this aftrt testing and remove the bottom one\\r\\n        // consumer.endCycleTime = block.timestamp + 30 days;\\r\\n        consumer.endCycleTime = block.timestamp;\\r\\n        consumer.isElectricitySupply = true;\\r\\n        consumer.distributorId = _distributorIndex;\\r\\n        consumer.isLastElectricityBillPaid = true;\\r\\n        emit ConsumerConnectedToDistributor(\\r\\n            consumerId,\\r\\n            _distributorIndex,\\r\\n            prevDistributorId\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getConsumersFromADistributor(\\r\\n        uint256 _distributorIndex\\r\\n    ) public view returns (uint256[] memory) {\\r\\n        // Distributor memory distributor = distributors[_distributorIndex];\\r\\n        // uint256 currentTime = block.timestamp;\\r\\n        // uint256 totalEnergyConsumedByConsumers;\\r\\n        // for (uint256 i = 0; i < distributor.consumerIds.length; i++) {\\r\\n        //     Consumer memory consumer = consumers[distributor.consumerIds[i]];\\r\\n        //     uint256 consumed = currentTime - consumer.startCycleTime;\\r\\n        //     totalEnergyConsumedByConsumers += consumed;\\r\\n        // }\\r\\n        // return totalEnergyConsumedByConsumers;\\r\\n        return distributors[_distributorIndex].consumerIds;\\r\\n    }\\r\\n\\r\\n    function payBill() public onlyConsumerOwner {\\r\\n        Consumer storage consumer = consumers[\\r\\n            consumersAddressToIds[msg.sender]\\r\\n        ];\\r\\n        require(\\r\\n            block.timestamp >= consumer.endCycleTime,\\r\\n            \\\"Payment can only be made after 30 days\\\"\\r\\n        );\\r\\n        Payment memory payment = Payment(\\r\\n            consumer.energyConsumedInCurrentCycle,\\r\\n            consumer.startCycleTime,\\r\\n            block.timestamp\\r\\n        );\\r\\n        consumerPayments[msg.sender].push(payment);\\r\\n        consumer.startCycleTime = block.timestamp;\\r\\n        //TODO: uncomment this after testing\\r\\n        // consumer.endCycleTime = block.timestamp + 30 days;\\r\\n        consumer.endCycleTime = block.timestamp;\\r\\n        consumer.energyConsumedInCurrentCycle = 0;\\r\\n        if(distributors[consumer.distributorId].isEnergySupply){\\r\\n        consumer.isElectricitySupply = true;\\r\\n        }\\r\\n        consumer.isLastElectricityBillPaid = true;\\r\\n\\r\\n        //@TODO: need to be reimplemented\\r\\n        // uint256 startCycleTime = consumer.startCycleTime;\\r\\n        // uint256 energyUsed = block.timestamp - consumer.startCycleTime;\\r\\n        // Distributor storage distributor = distributors[consumer.distributorId];\\r\\n        // distributor.totalEnergySold += energyUsed;\\r\\n        // consumer.totalEnergyConsumed += energyUsed;\\r\\n        // uint256 today = block.timestamp / 86400;\\r\\n        // // consumerPayments[msg.sender].\\r\\n        // consumerPayments[msg.sender].push(\\r\\n        //     Payment(energyUsed, consumer.startCycleTime, block.timestamp)\\r\\n        // );\\r\\n        // consumer.startCycleTime = block.timestamp;\\r\\n        emit ElectricityPaidByConsumer(\\r\\n            consumersAddressToIds[msg.sender],\\r\\n            payment.unitsConsumed,\\r\\n            payment.startTime,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function payBillAndCancelSupply() public {\\r\\n        Consumer storage consumer = consumers[\\r\\n            consumersAddressToIds[msg.sender]\\r\\n        ];\\r\\n\\r\\n        require(\\r\\n            block.timestamp >= consumer.endCycleTime,\\r\\n            \\\"Payment can only be made after 30 days\\\"\\r\\n        );\\r\\n        uint256 prevDistributorId = consumer.distributorId;\\r\\n        Payment memory payment = Payment(\\r\\n            consumer.energyConsumedInCurrentCycle,\\r\\n            consumer.startCycleTime,\\r\\n            consumer.endCycleTime\\r\\n        );\\r\\n        consumerPayments[msg.sender].push(payment);\\r\\n        consumer.startCycleTime = 0;\\r\\n        consumer.endCycleTime = 0;\\r\\n        consumer.energyConsumedInCurrentCycle=0;\\r\\n        consumer.isElectricitySupply = false;\\r\\n        consumer.isLastElectricityBillPaid = true;\\r\\n        consumer.distributorId = 0;\\r\\n\\r\\n        // remove consumer from the distributor list\\r\\n        Distributor storage prevDistributor = distributors[prevDistributorId];\\r\\n        uint256 index;\\r\\n        for (uint256 i = 0; i < prevDistributor.consumerIds.length; i++) {\\r\\n            if (\\r\\n                prevDistributor.consumerIds[i] ==\\r\\n                consumersAddressToIds[msg.sender]\\r\\n            ) {\\r\\n                index = i;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        for (uint i = index; i < prevDistributor.consumerIds.length - 1; i++) {\\r\\n            prevDistributor.consumerIds[i] = prevDistributor.consumerIds[i + 1];\\r\\n        }\\r\\n        prevDistributor.consumerIds.pop();\\r\\n\\r\\n        emit ConsumerCancelledElectricity(consumersAddressToIds[msg.sender],prevDistributorId,payment.unitsConsumed,payment.startTime, block.timestamp/86400);\\r\\n    }\\r\\n\\r\\n    function getUnitsConsumedByConsumerInCycle(\\r\\n        uint256 consumerIndex\\r\\n    ) public view returns (uint256) {\\r\\n        return consumers[consumerIndex].energyConsumedInCurrentCycle;\\r\\n    }\\r\\n\\r\\n    function getDistributors() public view returns (uint[] memory) {\\r\\n        return distributorArray;\\r\\n    }\\r\\n\\r\\n    // TODO: Check every 15 mins to see the energy produced by each consumer and then reduce the amount of emergy used by consumers by calculating the block timestamp\\r\\n\\r\\n    // powerplants\\r\\n    function getPowerplantById(\\r\\n        uint256 _powerplantIndex\\r\\n    )\\r\\n        public\\r\\n        view\\r\\n        powerPlantExists(_powerplantIndex)\\r\\n        returns (PowerPlant memory)\\r\\n    {\\r\\n        return powerPlants[_powerplantIndex];\\r\\n    }\\r\\n\\r\\n    function getPowerPlantEnergySoldByDay(\\r\\n        uint256 _powerplantIndex,\\r\\n        uint256 _day\\r\\n    ) public view powerPlantExists(_powerplantIndex) returns (uint256) {\\r\\n        return powerPlantsDailyEnergySoldById[_powerplantIndex][_day];\\r\\n    }\\r\\n\\r\\n    function getPowerPlantEnergyProducedByDay(\\r\\n        uint256 _powerplantIndex,\\r\\n        uint256 _day\\r\\n    ) public view powerPlantExists(_powerplantIndex) returns (uint256) {\\r\\n        return powerPlantsDailyEnergyProducedById[_powerplantIndex][_day];\\r\\n    }\\r\\n\\r\\n    function getSubstationsOfPowerPlant(\\r\\n        uint256 _powerplantIndex\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        powerPlantExists(_powerplantIndex)\\r\\n        returns (Substation[] memory)\\r\\n    {\\r\\n        uint256[] memory substationIds = getPowerplantById(_powerplantIndex)\\r\\n            .substationIds;\\r\\n        Substation[] memory substationsArray = new Substation[](\\r\\n            substationIds.length\\r\\n        );\\r\\n        for (uint256 i = 0; i < substationIds.length; i++) {\\r\\n            substationsArray[i] = (getSubstationById(substationIds[i]));\\r\\n        }\\r\\n        return substationsArray;\\r\\n    }\\r\\n\\r\\n    // substations\\r\\n    function getSubstationById(\\r\\n        uint256 _substationIndex\\r\\n    )\\r\\n        public\\r\\n        view\\r\\n        substationExists(_substationIndex)\\r\\n        returns (Substation memory)\\r\\n    {\\r\\n        return substations[_substationIndex];\\r\\n    }\\r\\n\\r\\n    function getSubstationEnergySoldByDay(\\r\\n        uint256 _substationIndex,\\r\\n        uint256 _day\\r\\n    ) public view substationExists(_substationIndex) returns (uint256) {\\r\\n        return substationsDailyEnergySoldById[_substationIndex][_day];\\r\\n    }\\r\\n\\r\\n    function getSubstationEnergyBoughtByDay(\\r\\n        uint256 _substationIndex,\\r\\n        uint256 _day\\r\\n    ) public view substationExists(_substationIndex) returns (uint256) {\\r\\n        return substationsDailyEnergyBoughtById[_substationIndex][_day];\\r\\n    }\\r\\n\\r\\n    // distributors\\r\\n    function getDistributorById(\\r\\n        uint256 _distributorIndex\\r\\n    )\\r\\n        public\\r\\n        view\\r\\n        distributorExists(_distributorIndex)\\r\\n        returns (Distributor memory)\\r\\n    {\\r\\n        return distributors[_distributorIndex];\\r\\n    }\\r\\n\\r\\n    // function getdistributorEnergySoldByDay(\\r\\n    //     uint256 _distributorIndex,\\r\\n    //     uint256 _day\\r\\n    // ) public view distributorExists(_distributorIndex) returns (uint256) {\\r\\n    //     return distributorsDailyEnergySoldById[_distributorIndex][_day];\\r\\n    // }\\r\\n\\r\\n    function getDistributorEnergyBoguhtByDay(\\r\\n        uint256 _distributorIndex,\\r\\n        uint256 _day\\r\\n    ) public view distributorExists(_distributorIndex) returns (uint256) {\\r\\n        return distributorsDailyEnergyBoughtById[_distributorIndex][_day];\\r\\n    }\\r\\n    function getConsumerEnergyBoguhtByDay(\\r\\n        uint256 _consumerIndex,\\r\\n        uint256 _day\\r\\n    ) public view consumerExists(_consumerIndex) returns (uint256) {\\r\\n        return consumersDailyEnergyBoughtById[_consumerIndex][_day];\\r\\n    }\\r\\n\\r\\n    function getConsumerById(\\r\\n        uint256 _consumerIndex\\r\\n    ) public view consumerExists(_consumerIndex) returns (Consumer memory) {\\r\\n        return consumers[_consumerIndex];\\r\\n    }\\r\\n\\r\\n    modifier powerPlantExists(uint256 _powerplantIndex) {\\r\\n        require(\\r\\n            powerPlants[_powerplantIndex].powerplantAddress != address(0),\\r\\n            \\\"Powerplant does not exist\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier substationExists(uint256 _substationIndex) {\\r\\n        require(\\r\\n            substations[_substationIndex].substationAddress != address(0),\\r\\n            \\\"Substation does not exist\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n    modifier distributorExists(uint256 _distributorIndex) {\\r\\n        require(\\r\\n            distributors[_distributorIndex].distributorAddress != address(0),\\r\\n            \\\"Distributor does not exist\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier consumerExists(uint256 _consumerIndex) {\\r\\n        require(\\r\\n            consumers[_consumerIndex].consumerAddress != address(0),\\r\\n            \\\"Consumer does not exist\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyConsumerOwner() {\\r\\n        require(\\r\\n            consumersAddressToIds[msg.sender] != 0,\\r\\n            \\\"Consumer does not exist or you are not the owner\\\"\\r\\n        );\\r\\n        require(\\r\\n            consumers[consumersAddressToIds[msg.sender]].consumerAddress ==\\r\\n                msg.sender,\\r\\n            \\\"You are not the owner\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyPowerPlantOwner() {\\r\\n        require(\\r\\n            powerPlantsAddressToIds[msg.sender] != 0,\\r\\n            \\\"Poweplant does not exist or you are not the owner\\\"\\r\\n        );\\r\\n        require(\\r\\n            powerPlants[powerPlantsAddressToIds[msg.sender]]\\r\\n                .powerplantAddress == msg.sender,\\r\\n            \\\"Only owner allowed\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlySubstationOwner() {\\r\\n        require(\\r\\n            substationsAddressToIds[msg.sender] != 0,\\r\\n            \\\"Substation does not exist or you are not the owner\\\"\\r\\n        );\\r\\n        require(\\r\\n            substations[substationsAddressToIds[msg.sender]]\\r\\n                .substationAddress == msg.sender,\\r\\n            \\\"Only owner allowed\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyDistributorOwner() {\\r\\n        require(\\r\\n            distributorAddressToIds[msg.sender] != 0,\\r\\n            \\\"Distributor does not exist or you are not the owner\\\"\\r\\n        );\\r\\n        require(\\r\\n            distributors[distributorAddressToIds[msg.sender]]\\r\\n                .distributorAddress == msg.sender,\\r\\n            \\\"Only owner allowed\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n\\r\\n    modifier accountExists(){\\r\\n        require(powerPlantsAddressToIds[msg.sender]==0,\\\"Account already exists with Powerplant\\\");\\r\\n        require(substationsAddressToIds[msg.sender]==0,\\\"Account already exists with Substation\\\");\\r\\n        require(distributorAddressToIds[msg.sender]==0,\\\"Account already exists with Distributor\\\");\\r\\n        require(consumersAddressToIds[msg.sender]==0,\\\"Account already exists with Consumer\\\");\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x6020b3b7b0c8f80079b49e0424988d8eefc7f1b14079d01cdff54d81f10ddec0\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 196,
        "contract": "contracts/ElectricitySupplyChain.sol:ElectricitySupplyChain",
        "label": "consumerPayments",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_array(t_struct(Payment)190_storage)dyn_storage)"
      },
      {
        "astId": 201,
        "contract": "contracts/ElectricitySupplyChain.sol:ElectricitySupplyChain",
        "label": "powerPlants",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(PowerPlant)160_storage)"
      },
      {
        "astId": 205,
        "contract": "contracts/ElectricitySupplyChain.sol:ElectricitySupplyChain",
        "label": "powerPlantsAddressToIds",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 211,
        "contract": "contracts/ElectricitySupplyChain.sol:ElectricitySupplyChain",
        "label": "powerPlantsDailyEnergyProducedById",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 217,
        "contract": "contracts/ElectricitySupplyChain.sol:ElectricitySupplyChain",
        "label": "powerPlantsDailyEnergySoldById",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 222,
        "contract": "contracts/ElectricitySupplyChain.sol:ElectricitySupplyChain",
        "label": "distributors",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(Distributor)126_storage)"
      },
      {
        "astId": 226,
        "contract": "contracts/ElectricitySupplyChain.sol:ElectricitySupplyChain",
        "label": "distributorAddressToIds",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 229,
        "contract": "contracts/ElectricitySupplyChain.sol:ElectricitySupplyChain",
        "label": "distributorArray",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 235,
        "contract": "contracts/ElectricitySupplyChain.sol:ElectricitySupplyChain",
        "label": "distributorsDailyEnergyBoughtById",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 241,
        "contract": "contracts/ElectricitySupplyChain.sol:ElectricitySupplyChain",
        "label": "distributorsDailyEnergySoldById",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 246,
        "contract": "contracts/ElectricitySupplyChain.sol:ElectricitySupplyChain",
        "label": "substations",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_struct(Substation)144_storage)"
      },
      {
        "astId": 250,
        "contract": "contracts/ElectricitySupplyChain.sol:ElectricitySupplyChain",
        "label": "substationsAddressToIds",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 256,
        "contract": "contracts/ElectricitySupplyChain.sol:ElectricitySupplyChain",
        "label": "substationsDailyEnergyBoughtById",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 262,
        "contract": "contracts/ElectricitySupplyChain.sol:ElectricitySupplyChain",
        "label": "substationsDailyEnergySoldById",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 267,
        "contract": "contracts/ElectricitySupplyChain.sol:ElectricitySupplyChain",
        "label": "consumers",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_struct(Consumer)183_storage)"
      },
      {
        "astId": 271,
        "contract": "contracts/ElectricitySupplyChain.sol:ElectricitySupplyChain",
        "label": "consumersAddressToIds",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 277,
        "contract": "contracts/ElectricitySupplyChain.sol:ElectricitySupplyChain",
        "label": "consumersDailyEnergyBoughtById",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 279,
        "contract": "contracts/ElectricitySupplyChain.sol:ElectricitySupplyChain",
        "label": "powerPlantCount",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 281,
        "contract": "contracts/ElectricitySupplyChain.sol:ElectricitySupplyChain",
        "label": "distributorCount",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 283,
        "contract": "contracts/ElectricitySupplyChain.sol:ElectricitySupplyChain",
        "label": "substationCount",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 285,
        "contract": "contracts/ElectricitySupplyChain.sol:ElectricitySupplyChain",
        "label": "consumerCount",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Payment)190_storage)dyn_storage": {
        "base": "t_struct(Payment)190_storage",
        "encoding": "dynamic_array",
        "label": "struct ElectricitySupplyChain.Payment[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_struct(Payment)190_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ElectricitySupplyChain.Payment[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Payment)190_storage)dyn_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(Consumer)183_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ElectricitySupplyChain.Consumer)",
        "numberOfBytes": "32",
        "value": "t_struct(Consumer)183_storage"
      },
      "t_mapping(t_uint256,t_struct(Distributor)126_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ElectricitySupplyChain.Distributor)",
        "numberOfBytes": "32",
        "value": "t_struct(Distributor)126_storage"
      },
      "t_mapping(t_uint256,t_struct(PowerPlant)160_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ElectricitySupplyChain.PowerPlant)",
        "numberOfBytes": "32",
        "value": "t_struct(PowerPlant)160_storage"
      },
      "t_mapping(t_uint256,t_struct(Substation)144_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ElectricitySupplyChain.Substation)",
        "numberOfBytes": "32",
        "value": "t_struct(Substation)144_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Consumer)183_storage": {
        "encoding": "inplace",
        "label": "struct ElectricitySupplyChain.Consumer",
        "members": [
          {
            "astId": 162,
            "contract": "contracts/ElectricitySupplyChain.sol:ElectricitySupplyChain",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 164,
            "contract": "contracts/ElectricitySupplyChain.sol:ElectricitySupplyChain",
            "label": "homeAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 166,
            "contract": "contracts/ElectricitySupplyChain.sol:ElectricitySupplyChain",
            "label": "consumerAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 168,
            "contract": "contracts/ElectricitySupplyChain.sol:ElectricitySupplyChain",
            "label": "distributorId",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 170,
            "contract": "contracts/ElectricitySupplyChain.sol:ElectricitySupplyChain",
            "label": "totalEnergyConsumed",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 172,
            "contract": "contracts/ElectricitySupplyChain.sol:ElectricitySupplyChain",
            "label": "isElectricitySupply",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 174,
            "contract": "contracts/ElectricitySupplyChain.sol:ElectricitySupplyChain",
            "label": "payableAmountForEnergy",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 176,
            "contract": "contracts/ElectricitySupplyChain.sol:ElectricitySupplyChain",
            "label": "startCycleTime",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 178,
            "contract": "contracts/ElectricitySupplyChain.sol:ElectricitySupplyChain",
            "label": "endCycleTime",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 180,
            "contract": "contracts/ElectricitySupplyChain.sol:ElectricitySupplyChain",
            "label": "isLastElectricityBillPaid",
            "offset": 0,
            "slot": "9",
            "type": "t_bool"
          },
          {
            "astId": 182,
            "contract": "contracts/ElectricitySupplyChain.sol:ElectricitySupplyChain",
            "label": "energyConsumedInCurrentCycle",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_struct(Distributor)126_storage": {
        "encoding": "inplace",
        "label": "struct ElectricitySupplyChain.Distributor",
        "members": [
          {
            "astId": 106,
            "contract": "contracts/ElectricitySupplyChain.sol:ElectricitySupplyChain",
            "label": "substationId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 108,
            "contract": "contracts/ElectricitySupplyChain.sol:ElectricitySupplyChain",
            "label": "distributorAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 110,
            "contract": "contracts/ElectricitySupplyChain.sol:ElectricitySupplyChain",
            "label": "name",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 112,
            "contract": "contracts/ElectricitySupplyChain.sol:ElectricitySupplyChain",
            "label": "area",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 114,
            "contract": "contracts/ElectricitySupplyChain.sol:ElectricitySupplyChain",
            "label": "energyAvailable",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 117,
            "contract": "contracts/ElectricitySupplyChain.sol:ElectricitySupplyChain",
            "label": "consumerIds",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 119,
            "contract": "contracts/ElectricitySupplyChain.sol:ElectricitySupplyChain",
            "label": "totalEnergySold",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 121,
            "contract": "contracts/ElectricitySupplyChain.sol:ElectricitySupplyChain",
            "label": "totalEnergyBought",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 123,
            "contract": "contracts/ElectricitySupplyChain.sol:ElectricitySupplyChain",
            "label": "isEnergySupply",
            "offset": 0,
            "slot": "8",
            "type": "t_bool"
          },
          {
            "astId": 125,
            "contract": "contracts/ElectricitySupplyChain.sol:ElectricitySupplyChain",
            "label": "isLessEnergyWarning",
            "offset": 1,
            "slot": "8",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(Payment)190_storage": {
        "encoding": "inplace",
        "label": "struct ElectricitySupplyChain.Payment",
        "members": [
          {
            "astId": 185,
            "contract": "contracts/ElectricitySupplyChain.sol:ElectricitySupplyChain",
            "label": "unitsConsumed",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 187,
            "contract": "contracts/ElectricitySupplyChain.sol:ElectricitySupplyChain",
            "label": "startTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 189,
            "contract": "contracts/ElectricitySupplyChain.sol:ElectricitySupplyChain",
            "label": "endTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(PowerPlant)160_storage": {
        "encoding": "inplace",
        "label": "struct ElectricitySupplyChain.PowerPlant",
        "members": [
          {
            "astId": 146,
            "contract": "contracts/ElectricitySupplyChain.sol:ElectricitySupplyChain",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 148,
            "contract": "contracts/ElectricitySupplyChain.sol:ElectricitySupplyChain",
            "label": "area",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 150,
            "contract": "contracts/ElectricitySupplyChain.sol:ElectricitySupplyChain",
            "label": "powerplantAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 153,
            "contract": "contracts/ElectricitySupplyChain.sol:ElectricitySupplyChain",
            "label": "substationIds",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 155,
            "contract": "contracts/ElectricitySupplyChain.sol:ElectricitySupplyChain",
            "label": "totalEnergyProduced",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 157,
            "contract": "contracts/ElectricitySupplyChain.sol:ElectricitySupplyChain",
            "label": "totalEnergySold",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 159,
            "contract": "contracts/ElectricitySupplyChain.sol:ElectricitySupplyChain",
            "label": "energyAvailableToBuy",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Substation)144_storage": {
        "encoding": "inplace",
        "label": "struct ElectricitySupplyChain.Substation",
        "members": [
          {
            "astId": 128,
            "contract": "contracts/ElectricitySupplyChain.sol:ElectricitySupplyChain",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 130,
            "contract": "contracts/ElectricitySupplyChain.sol:ElectricitySupplyChain",
            "label": "area",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 132,
            "contract": "contracts/ElectricitySupplyChain.sol:ElectricitySupplyChain",
            "label": "powerplantId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 134,
            "contract": "contracts/ElectricitySupplyChain.sol:ElectricitySupplyChain",
            "label": "substationAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 136,
            "contract": "contracts/ElectricitySupplyChain.sol:ElectricitySupplyChain",
            "label": "totalEnergyReceived",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 138,
            "contract": "contracts/ElectricitySupplyChain.sol:ElectricitySupplyChain",
            "label": "totalEnergySold",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 141,
            "contract": "contracts/ElectricitySupplyChain.sol:ElectricitySupplyChain",
            "label": "distributorIds",
            "offset": 0,
            "slot": "6",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 143,
            "contract": "contracts/ElectricitySupplyChain.sol:ElectricitySupplyChain",
            "label": "energyAvailableToBuy",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}