{
  "language": "Solidity",
  "sources": {
    "contracts/ElectricitySupplyChain.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n// import \"hardhat/console.sol\";\r\n\r\ncontract ElectricitySupplyChain {\r\n    event PowerPlantAdded(uint256 indexed powerplantId, address indexed owner);\r\n    event EnergyAddedByPowerPlant(\r\n        uint256 indexed powerplantId,\r\n        uint256 energyAdded,\r\n        uint256 date\r\n    );\r\n\r\n    event SubstationAdded(\r\n        uint256 indexed substationId,\r\n        address indexed owner,\r\n        uint256 energyAvailableToBuy\r\n    );\r\n    event SubstationConnectedToPowerPlant(\r\n        uint256 indexed substationId,\r\n        uint256 indexed powerPlantId,\r\n        uint256 indexed prevPowerplantId\r\n    );\r\n    event EnergyBoughtBySubstation(\r\n        uint256 indexed substationId,\r\n        uint256 energyBought,\r\n        uint256 date\r\n    );\r\n\r\n    event DistributorAdded(\r\n        uint256 indexed distributorId,\r\n        address indexed owner,\r\n        uint256 energyAvailableToBuy\r\n    );\r\n    event DistributorConnectedToSubstation(\r\n        uint256 indexed distributorId,\r\n        uint256 indexed substationId,\r\n        uint256 indexed prevSubstationId\r\n    );\r\n    event EnergyBoughtByDistributor(\r\n        uint256 indexed distributorId,\r\n        uint256 energyBought,\r\n        uint256 date\r\n    );\r\n    // Define the Distributor struct\r\n    struct Distributor {\r\n        uint256 substationId;\r\n        address distributorAddress;\r\n        string name;\r\n        string area;\r\n        uint256 energyAvailable;\r\n        uint256[] consumerIds;\r\n        uint256 totalEnergySold;\r\n        uint256 totalEnergyBought;\r\n    }\r\n\r\n    // Define the Substation struct\r\n    struct Substation {\r\n        string name;\r\n        string area;\r\n        uint256 powerplantId;\r\n        address substationAddress;\r\n        uint256 totalEnergyReceived;\r\n        uint256 totalEnergySold;\r\n        uint256[] distributorIds;\r\n        uint256 energyAvailableToBuy;\r\n    }\r\n\r\n    // Define the PowerPlant struct\r\n    struct PowerPlant {\r\n        string name;\r\n        string area;\r\n        address powerplantAddress;\r\n        uint256[] substationIds;\r\n        uint256 totalEnergyProduced;\r\n        uint256 totalEnergySold;\r\n        uint256 energyAvailableToBuy;\r\n    }\r\n\r\n    // Define an array to hold all the power plants\r\n    mapping(uint256 => PowerPlant) public powerPlants;\r\n    mapping(address => uint256) public powerPlantsAddressToIds;\r\n    mapping(uint256 => mapping(uint256 => uint256)) powerPlantsDailyEnergyProducedById;\r\n    mapping(uint256 => mapping(uint256 => uint256)) powerPlantsDailyEnergySoldById;\r\n\r\n    mapping(uint256 => Distributor) public distributors;\r\n    mapping(address => uint256) public distributorAddressToIds;\r\n    // distributorId -> date -> energy bought\r\n    mapping(uint256 => mapping(uint256 => uint256)) distributorsDailyEnergyBoughtById;\r\n\r\n    mapping(uint256 => Substation) public substations;\r\n    mapping(address => uint256) public substationsAddressToIds;\r\n\r\n    mapping(uint256 => mapping(uint256 => uint256)) substationsDailyEnergyBoughtById;\r\n    mapping(uint256 => mapping(uint256 => uint256)) substationsDailyEnergySoldById;\r\n\r\n    // ids for each entity\r\n    uint256 powerPlantCount;\r\n    uint256 distributorCount;\r\n    uint256 substationCount;\r\n\r\n    // Define a function to add a new power plant to the supply chain\r\n    function addPowerPlant(\r\n        string memory _name,\r\n        string memory _area,\r\n        uint256 _energyAvailableToBuy\r\n    ) public {\r\n        uint256 powerplantId = powerPlantsAddressToIds[msg.sender];\r\n        // check if power plant does not exist with the wallet address\r\n        require(powerplantId == 0, \"Power plant already exists\");\r\n        powerPlantCount += 1;\r\n        PowerPlant storage powerplant = powerPlants[powerPlantCount];\r\n        powerPlantsAddressToIds[msg.sender] = powerPlantCount;\r\n        // Create a new PowerPlant struct\r\n        powerplant.powerplantAddress = msg.sender;\r\n        powerplant.name = _name;\r\n        powerplant.area = _area;\r\n        powerplant.energyAvailableToBuy = _energyAvailableToBuy;\r\n        powerplant.totalEnergyProduced = _energyAvailableToBuy;\r\n        uint256 today = block.timestamp / 86400;\r\n        powerPlantsDailyEnergyProducedById[powerPlantCount][\r\n            today\r\n        ] = _energyAvailableToBuy;\r\n        emit PowerPlantAdded(powerPlantCount, msg.sender);\r\n    }\r\n\r\n    // Define a function to add a new substation to a power plant\r\n    function addSubstation(\r\n        uint256 _energyAvailableToBuy,\r\n        string memory _name,\r\n        string memory _area\r\n    ) public {\r\n        require(\r\n            substationsAddressToIds[msg.sender] == 0,\r\n            \"Substation already exists with the current address\"\r\n        );\r\n        substationCount += 1;\r\n        Substation storage substation = substations[substationCount];\r\n        substationsAddressToIds[msg.sender] = substationCount;\r\n        substation.name = _name;\r\n        substation.area = _area;\r\n        substation.substationAddress = msg.sender;\r\n        substation.energyAvailableToBuy = _energyAvailableToBuy;\r\n        // add substation id to the power plant\r\n\r\n        emit SubstationAdded(\r\n            substationCount,\r\n            msg.sender,\r\n            _energyAvailableToBuy\r\n        );\r\n    }\r\n\r\n    function connectSubstationToPowerplant(\r\n        uint256 powerplantIndex\r\n    ) public onlySubstationOwner powerPlantExists(powerplantIndex) {\r\n       \r\n        Substation storage substation = substations[\r\n            substationsAddressToIds[msg.sender]\r\n        ];\r\n        uint256 prevPlantId = substation.powerplantId;\r\n        if (substation.powerplantId != 0) {\r\n            PowerPlant storage prevPlant = powerPlants[substation.powerplantId];\r\n            uint256 index;\r\n            for (uint256 i = 0; i < prevPlant.substationIds.length; i++) {\r\n                if (\r\n                    prevPlant.substationIds[i] ==\r\n                    substationsAddressToIds[msg.sender]\r\n                ) {\r\n                    index = i;\r\n                    break;\r\n                }\r\n            }\r\n            for (uint i = index; i < prevPlant.substationIds.length - 1; i++) {\r\n                prevPlant.substationIds[i] = prevPlant.substationIds[i + 1];\r\n            }\r\n            prevPlant.substationIds.pop();\r\n        }\r\n        substation.powerplantId = powerplantIndex;\r\n        PowerPlant storage powerplant = powerPlants[powerplantIndex];\r\n        powerplant.substationIds.push(substationsAddressToIds[msg.sender]);\r\n        emit SubstationConnectedToPowerPlant(\r\n            substationsAddressToIds[msg.sender],\r\n            powerplantIndex,\r\n            prevPlantId\r\n        );\r\n    }\r\n\r\n    // Define a function to add energy available to buy for a powerplant\r\n    function addEnergyAvailableToBuy(\r\n        uint256 _energyAvailableToBuy\r\n    ) public onlyPowerPlantOwner {\r\n        uint256 powerplantId = powerPlantsAddressToIds[msg.sender];\r\n        PowerPlant storage powerPlant = powerPlants[powerplantId];\r\n        powerPlant.energyAvailableToBuy += _energyAvailableToBuy;\r\n        // Update the daily energy produced mapping\r\n        uint256 today = block.timestamp / 86400;\r\n        powerPlantsDailyEnergyProducedById[powerplantId][\r\n            today\r\n        ] += _energyAvailableToBuy;\r\n        powerPlant.totalEnergyProduced += _energyAvailableToBuy;\r\n        emit EnergyAddedByPowerPlant(\r\n            powerplantId,\r\n            _energyAvailableToBuy,\r\n            today\r\n        );\r\n    }\r\n\r\n    // Define a function for a substation to buy energy from a power plant\r\n    function buyEnergyFromPowerPlant(\r\n        uint256 _energyAmount\r\n    ) public onlySubstationOwner {\r\n        uint256 substationId = substationsAddressToIds[msg.sender];\r\n        Substation storage substation = substations[substationId];\r\n        // Get the power plant from the powerPlants array\r\n        PowerPlant storage powerPlant = powerPlants[substation.powerplantId];\r\n        require(\r\n            powerPlant.energyAvailableToBuy >= _energyAmount,\r\n            \"Insufficient energy available to buy\"\r\n        );\r\n        powerPlant.energyAvailableToBuy -= _energyAmount;\r\n        substation.totalEnergyReceived += _energyAmount;\r\n        // Update the daily energy bought mapping\r\n        uint256 today = block.timestamp / 86400;\r\n        substationsDailyEnergyBoughtById[substationId][today] += _energyAmount;\r\n        substation.energyAvailableToBuy += _energyAmount;\r\n        powerPlantsDailyEnergySoldById[substation.powerplantId][\r\n            today\r\n        ] += _energyAmount;\r\n        powerPlant.totalEnergySold += _energyAmount;\r\n        emit EnergyBoughtBySubstation(\r\n            substationsAddressToIds[msg.sender],\r\n            _energyAmount,\r\n            today\r\n        );\r\n    }\r\n\r\n    function addDistributor(\r\n        string memory _name,\r\n        string memory _area,\r\n        uint256 _energyAvailableToBuy\r\n    ) public {\r\n        require(\r\n            distributorAddressToIds[msg.sender] == 0,\r\n            \"Distributor already exists with the address\"\r\n        );\r\n        distributorCount += 1;\r\n        Distributor storage distributor = distributors[distributorCount];\r\n        distributorAddressToIds[msg.sender]=distributorCount;\r\n        distributor.name = _name;\r\n        distributor.area = _area;\r\n        distributor.distributorAddress = msg.sender;\r\n        distributor.energyAvailable = _energyAvailableToBuy;\r\n        emit DistributorAdded(\r\n            distributorCount,\r\n            msg.sender,\r\n            _energyAvailableToBuy\r\n        );\r\n    }\r\n\r\n    function connectDistributorToSubstation(\r\n        uint256 _substationIndex\r\n    ) public onlyDistributorOwner substationExists(_substationIndex) {\r\n        Distributor storage distributor = distributors[\r\n            distributorAddressToIds[msg.sender]\r\n        ];\r\n        uint256 prevSubstationIndex = distributor.substationId;\r\n        if (distributor.substationId != 0) {\r\n            Substation storage prevSubstation = substations[\r\n                distributor.substationId\r\n            ];\r\n            uint256 index;\r\n            for (uint256 i = 0; i < prevSubstation.distributorIds.length; i++) {\r\n                if (\r\n                    prevSubstation.distributorIds[i] ==\r\n                    distributorAddressToIds[msg.sender]\r\n                ) {\r\n                    index = i;\r\n                    break;\r\n                }\r\n            }\r\n            for (\r\n                uint i = index;\r\n                i < prevSubstation.distributorIds.length - 1;\r\n                i++\r\n            ) {\r\n                prevSubstation.distributorIds[i] = prevSubstation\r\n                    .distributorIds[i + 1];\r\n            }\r\n            prevSubstation.distributorIds.pop();\r\n        }\r\n        distributor.substationId = _substationIndex;\r\n        Substation storage substation = substations[_substationIndex];\r\n        substation.distributorIds.push(substationsAddressToIds[msg.sender]);\r\n        emit DistributorConnectedToSubstation(\r\n            distributorAddressToIds[msg.sender],\r\n            _substationIndex,\r\n            prevSubstationIndex\r\n        );\r\n    }\r\n\r\n    function buyEnergyFromSubstation(\r\n        uint256 _energyAmount\r\n    ) public onlyDistributorOwner {\r\n        uint256 distributorId = distributorAddressToIds[msg.sender];\r\n        Distributor storage distributor = distributors[distributorId];\r\n        // Get the power plant from the powerPlants array\r\n        Substation storage substation = substations[distributor.substationId];\r\n        require(\r\n            substation.energyAvailableToBuy >= _energyAmount,\r\n            \"Insufficient energy available to buy\"\r\n        );\r\n        substation.energyAvailableToBuy -= _energyAmount;\r\n        distributor.totalEnergyBought += _energyAmount;\r\n        // Update the daily energy bought mapping\r\n        uint256 today = block.timestamp / 86400;\r\n        distributorsDailyEnergyBoughtById[distributorId][\r\n            today\r\n        ] += _energyAmount;\r\n        distributor.energyAvailable += _energyAmount;\r\n        substationsDailyEnergySoldById[distributor.substationId][\r\n            today\r\n        ] += _energyAmount;\r\n\r\n        emit EnergyBoughtByDistributor(distributorId, _energyAmount, today);\r\n    }\r\n\r\n    // powerplants\r\n    function getPowerplantById(\r\n        uint256 _powerplantIndex\r\n    )\r\n        public\r\n        view\r\n        powerPlantExists(_powerplantIndex)\r\n        returns (PowerPlant memory)\r\n    {\r\n        return powerPlants[_powerplantIndex];\r\n    }\r\n\r\n    function getPowerPlantEnergySoldByDay(\r\n        uint256 _powerplantIndex,\r\n        uint256 _day\r\n    ) public view powerPlantExists(_powerplantIndex) returns (uint256) {\r\n        return powerPlantsDailyEnergySoldById[_powerplantIndex][_day];\r\n    }\r\n\r\n    function getPowerPlantEnergyProducedByDay(\r\n        uint256 _powerplantIndex,\r\n        uint256 _day\r\n    ) public view powerPlantExists(_powerplantIndex) returns (uint256) {\r\n        return powerPlantsDailyEnergyProducedById[_powerplantIndex][_day];\r\n    }\r\n\r\n    function getSubstationsOfPowerPlant(\r\n        uint256 _powerplantIndex\r\n    )\r\n        external\r\n        view\r\n        powerPlantExists(_powerplantIndex)\r\n        returns (Substation[] memory)\r\n    {\r\n        uint256[] memory substationIds = getPowerplantById(_powerplantIndex)\r\n            .substationIds;\r\n        Substation[] memory substationsArray = new Substation[](\r\n            substationIds.length\r\n        );\r\n        for (uint256 i = 0; i < substationIds.length; i++) {\r\n            substationsArray[i] = (getSubstationById(substationIds[i]));\r\n        }\r\n        return substationsArray;\r\n    }\r\n\r\n    // substations\r\n    function getSubstationById(\r\n        uint256 _substationIndex\r\n    )\r\n        public\r\n        view\r\n        substationExists(_substationIndex)\r\n        returns (Substation memory)\r\n    {\r\n        return substations[_substationIndex];\r\n    }\r\n\r\n    function getSubstationEnergySoldByDay(\r\n        uint256 _substationIndex,\r\n        uint256 _day\r\n    ) public view substationExists(_substationIndex) returns (uint256) {\r\n        return substationsDailyEnergySoldById[_substationIndex][_day];\r\n    }\r\n\r\n    function getSubstationEnergyBoughtByDay(\r\n        uint256 _substationIndex,\r\n        uint256 _day\r\n    ) public view substationExists(_substationIndex) returns (uint256) {\r\n        return substationsDailyEnergyBoughtById[_substationIndex][_day];\r\n    }\r\n\r\n    // distributors\r\n    function getDistributorById(\r\n        uint256 _distributorIndex\r\n    )\r\n        public\r\n        view\r\n        distributorExists(_distributorIndex)\r\n        returns (Distributor memory)\r\n    {\r\n        return distributors[_distributorIndex];\r\n    }\r\n\r\n    // function getdistributorEnergySoldByDay(\r\n    //     uint256 _distributorIndex,\r\n    //     uint256 _day\r\n    // ) public view distributorExists(_distributorIndex) returns (uint256) {\r\n    //     return distributorsDailyEnergySoldById[_distributorIndex][_day];\r\n    // }\r\n\r\n    function getDistributorEnergyBoguhtByDay(\r\n        uint256 _distributorIndex,\r\n        uint256 _day\r\n    ) public view distributorExists(_distributorIndex) returns (uint256) {\r\n        return distributorsDailyEnergyBoughtById[_distributorIndex][_day];\r\n    }\r\n\r\n    modifier powerPlantExists(uint256 _powerplantIndex) {\r\n        require(\r\n            powerPlants[_powerplantIndex].powerplantAddress != address(0),\r\n            \"Powerplant does not exist\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier substationExists(uint256 _substationIndex) {\r\n        require(\r\n            substations[_substationIndex].substationAddress != address(0),\r\n            \"Substation does not exist\"\r\n        );\r\n        _;\r\n    }\r\n    modifier distributorExists(uint256 _distributorIndex) {\r\n        require(\r\n            distributors[_distributorIndex].distributorAddress != address(0),\r\n            \"Distributor does not exist\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyPowerPlantOwner() {\r\n        require(\r\n            powerPlantsAddressToIds[msg.sender] != 0,\r\n            \"Poweplant does not exist or you are not the owner\"\r\n        );\r\n        require(\r\n            powerPlants[powerPlantsAddressToIds[msg.sender]]\r\n                .powerplantAddress == msg.sender,\r\n            \"Only owner allowed\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlySubstationOwner() {\r\n        require(\r\n            substationsAddressToIds[msg.sender] != 0,\r\n            \"Substation does not exist or you are not the owner\"\r\n        );\r\n        require(\r\n            substations[substationsAddressToIds[msg.sender]]\r\n                .substationAddress == msg.sender,\r\n            \"Only owner allowed\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyDistributorOwner() {\r\n        require(\r\n            distributorAddressToIds[msg.sender] != 0,\r\n            \"Distributor does not exist or you are not the owner\"\r\n        );\r\n        require(\r\n            distributors[distributorAddressToIds[msg.sender]]\r\n                .distributorAddress == msg.sender,\r\n            \"Only owner allowed\"\r\n        );\r\n        _;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}